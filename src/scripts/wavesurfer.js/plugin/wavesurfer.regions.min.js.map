{"version":3,"sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/./src/plugin/regions/index.js","webpack://WaveSurfer.[name]/./src/plugin/regions/region.js","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","RegionsPlugin","params","ws","wavesurfer","util","getRegionSnapToGridValue","value","maxRegions","regionsMinLength","Object","getOwnPropertyNames","Observer","prototype","forEach","key","Region","_onBackendCreated","wrapper","drawer","orientation","regions","region","edgeScrollWidth","clientWidth","add","list","_onReady","vertical","dragSelection","enableDragSelection","keys","id","updateRender","name","deferInit","staticProps","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","instance","isReady","once","un","length","wouldExceedMaxRegions","minLength","on","remove","drag","maxScroll","start","touchId","scrollDirection","wrapperRect","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","duration","getDuration","pxMove","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","withOrientation","getBoundingClientRect","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","event","startUpdate","endUpdate","orientedEvent","x","clientX","left","right","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","regionsUtils","style","regionsUtil","getId","Number","resize","undefined","Boolean","isResizing","isDragging","loop","color","handleStyle","handleLeftEl","handleRightEl","data","attributes","showTooltip","maxLength","_onRedraw","preventContextMenu","channelIdx","parseInt","regionHeight","marginTop","channelCount","backend","buffer","numberOfChannels","floor","getHeight","formatTimeCallback","bindInOut","render","updateHandlesResize","element","removeChild","domElement","s","play","attrname","appendChild","createElement","className","title","formatTime","setAttribute","position","zIndex","height","top","css","cursor","width","backgroundColor","handleLeftCss","assign","handleRightCss","bindEvents","map","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","regionWidth","firedIn","firedOut","onProcess","realTime","preventDefault","stopPropagation","bindDragEvents","startTime","regionLeftHalfTime","regionRightHalfTime","updated","distanceBetweenCursorAndWrapperEdge","regionHalfTimeWidth","adjustment","minPxPerSec","wrapperScrollLeft","calculatedLeft","calculatedRight","delta","onDrag","onResize","onDown","target","tagName","toLowerCase","classList","contains","onUp","onMove","maxEnd","passive","direction","cursorStyle","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"mappings":"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","file":"wavesurfer.regions.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(this, function() {\nreturn ","/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number[]} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n * @property {boolean} showTooltip=true Enable/disable tooltip displaying start and end times when hovering over region.\n */\n\nimport {Region} from \"./region.js\";\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = {\n            ...ws.util,\n            getRegionSnapToGridValue: value => {\n                return this.getRegionSnapToGridValue(value, params);\n            }\n        };\n        this.maxRegions = params.maxRegions;\n        this.regionsMinLength = params.regionsMinLength || null;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        // By default, scroll the container if the user drags a region\n        // within 5% of its edge\n        const scrollWidthProportion = 0.05;\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.orientation = this.wavesurfer.drawer.orientation;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    region.edgeScrollWidth = this.params.edgeScrollWidth ||\n                        this.wrapper.clientWidth * scrollWidthProportion;\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.vertical = this.wavesurfer.drawer.params.vertical;\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * check to see if adding a new region would exceed maxRegions\n     * @return {boolean} whether we should proceed and create a region\n     * @private\n     */\n    wouldExceedMaxRegions() {\n        return (\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\n        );\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        if (this.wouldExceedMaxRegions()) {\n            return null;\n        }\n\n        if (!params.minLength && this.regionsMinLength) {\n            params = {...params, minLength: this.regionsMinLength};\n        }\n\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        this.disableDragSelection();\n\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth -\n                this.wrapper.clientWidth;\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseleave', eventUp);\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n            this.wrapper.removeEventListener('mouseleave', eventUp);\n        });\n\n        const eventMove = event => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n            if (!region) {\n                region = this.add(params || {});\n                if (!region) {\n                    return;\n                }\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(event);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = orientedEvent.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(event);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n\n        this.wavesurfer.on('region-created', region => {\n            if (this.regionsMinLength) {\n                region.minLength = this.regionsMinLength;\n            }\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n","/**\n *  @since 4.0.0\n *\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * `RegionsPlugin` (main plugin class).\n *\n * @extends {Observer}\n */\nexport class Region {\n    constructor(params, regionsUtils, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n        this.regionsUtil = regionsUtils;\n        this.vertical = ws.drawer.params.vertical;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                this.start +\n                (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        // reflect resize and drag state of region for region-updated listener\n        this.isResizing = false;\n        this.isDragging = false;\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        // The left and right handleStyle properties can be set to 'none' for\n        // no styling or can be assigned an object containing CSS properties.\n        this.handleStyle = params.handleStyle || {\n            left: {},\n            right: {}\n        };\n        this.handleLeftEl = null;\n        this.handleRightEl = null;\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n        this.showTooltip = params.showTooltip ?? true;\n\n        this.maxLength = params.maxLength;\n        // It assumes the minLength parameter value, or the regionsMinLength parameter value, if the first one not provided\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n        // Determines whether the context menu is prevented from being opened.\n        this.preventContextMenu =\n            params.preventContextMenu === undefined\n                ? false\n                : Boolean(params.preventContextMenu);\n\n        // select channel ID to set region\n        let channelIdx =\n            params.channelIdx == null ? -1 : parseInt(params.channelIdx);\n        this.regionHeight = '100%';\n        this.marginTop = '0px';\n\n        if (channelIdx !== -1) {\n            let channelCount =\n                this.wavesurfer.backend.buffer != null\n                    ? this.wavesurfer.backend.buffer.numberOfChannels\n                    : -1;\n            if (channelCount >= 0 && channelIdx < channelCount) {\n                this.regionHeight = Math.floor((1 / channelCount) * 100) + '%';\n                this.marginTop =\n                    this.wavesurfer.getHeight() * channelIdx + 'px';\n            }\n        }\n\n        this.formatTimeCallback = params.formatTimeCallback;\n        this.edgeScrollWidth = params.edgeScrollWidth;\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    /* Update region params. */\n    update(params) {\n        if (params.start != null) {\n            this.start = Number(params.start);\n        }\n        if (params.end != null) {\n            this.end = Number(params.end);\n        }\n        if (params.loop != null) {\n            this.loop = Boolean(params.loop);\n        }\n        if (params.color != null) {\n            this.color = params.color;\n        }\n        if (params.handleStyle != null) {\n            this.handleStyle = params.handleStyle;\n        }\n        if (params.data != null) {\n            this.data = params.data;\n        }\n        if (params.resize != null) {\n            this.resize = Boolean(params.resize);\n            this.updateHandlesResize(this.resize);\n        }\n        if (params.drag != null) {\n            this.drag = Boolean(params.drag);\n        }\n        if (params.maxLength != null) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (params.minLength != null) {\n            this.minLength = Number(params.minLength);\n        }\n        if (params.attributes != null) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.wrapper.removeChild(this.element.domElement);\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /**\n     * Play the audio region.\n     * @param {number} start Optional offset to start playing at\n     */\n    play(start) {\n        const s = start || this.start;\n        this.wavesurfer.play(s, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /**\n     * Play the audio region in a loop.\n     * @param {number} start Optional offset to start playing at\n     * */\n    playLoop(start) {\n        this.loop = true;\n        this.play(start);\n    }\n\n    /**\n     * Set looping on/off.\n     * @param {boolean} loop True if should play in loop\n     */\n    setLoop(loop) {\n        this.loop = loop;\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        this.element = this.util.withOrientation(\n            this.wrapper.appendChild(document.createElement('region')),\n            this.vertical\n        );\n\n        this.element.className = 'wavesurfer-region';\n        if (this.showTooltip) {\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n        this.element.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            this.element.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        this.style(this.element, {\n            position: 'absolute',\n            zIndex: 2,\n            height: this.regionHeight,\n            top: this.marginTop\n        });\n\n        /* Resize handles */\n        if (this.resize) {\n            this.handleLeftEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n            this.handleRightEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n\n            this.handleLeftEl.className = 'wavesurfer-handle wavesurfer-handle-start';\n            this.handleRightEl.className = 'wavesurfer-handle wavesurfer-handle-end';\n\n            // Default CSS properties for both handles.\n            const css = {\n                cursor: this.vertical ? 'row-resize' : 'col-resize',\n                position: 'absolute',\n                top: '0px',\n                width: '2px',\n                height: '100%',\n                backgroundColor: 'rgba(0, 0, 0, 1)'\n            };\n\n            // Merge CSS properties per handle.\n            const handleLeftCss =\n                this.handleStyle.left !== 'none'\n                    ? Object.assign(\n                        { left: '0px' },\n                        css,\n                        this.handleStyle.left\n                    )\n                    : null;\n            const handleRightCss =\n                this.handleStyle.right !== 'none'\n                    ? Object.assign(\n                        { right: '0px' },\n                        css,\n                        this.handleStyle.right\n                    )\n                    : null;\n\n            if (handleLeftCss) {\n                this.style(this.handleLeftEl, handleLeftCss);\n            }\n\n            if (handleRightCss) {\n                this.style(this.handleRightEl, handleRightCss);\n            }\n        }\n\n        this.updateRender();\n        this.bindEvents();\n    }\n\n    formatTime(start, end) {\n        if (this.formatTimeCallback) {\n            return this.formatTimeCallback(start, end);\n        }\n        return (start == end ? [start] : [start, end])\n            .map((time) =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\n                ].join(':')\n            )\n            .join('-');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        // duration varies during loading process, so don't overwrite important data\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        let startLimited = this.start;\n        let endLimited = this.end;\n        if (startLimited < 0) {\n            startLimited = 0;\n            endLimited = endLimited - startLimited;\n        }\n        if (endLimited > dur) {\n            endLimited = dur;\n            startLimited = dur - (endLimited - startLimited);\n        }\n\n        if (this.minLength != null) {\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\n        }\n\n        if (this.maxLength != null) {\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((startLimited / dur) * width);\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            if (this.showTooltip) {\n                this.element.title = this.formatTime(this.start, this.end);\n            }\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = (time) => {\n            let start = Math.round(this.start * 10) / 10;\n            let end = Math.round(this.end * 10) / 10;\n            time = Math.round(time * 10) / 10;\n\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (start > time || end <= time)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && start <= time && end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                const realTime = this.wavesurfer.getCurrentTime();\n                if (realTime >= this.start && realTime <= this.end) {\n                    this.wavesurfer.play(this.start);\n                }\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        const preventContextMenu = this.preventContextMenu;\n\n        this.element.addEventListener('mouseenter', (e) => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', (e) => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        this.element.addEventListener('contextmenu', (e) => {\n            if (preventContextMenu) {\n                e.preventDefault();\n            }\n            this.fireEvent('contextmenu', e);\n            this.wavesurfer.fireEvent('region-contextmenu', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        if (this.drag || this.resize) {\n            this.bindDragEvents();\n        }\n    }\n\n    bindDragEvents() {\n        const container = this.wavesurfer.drawer.container;\n        const scrollSpeed = this.scrollSpeed;\n        const scrollThreshold = this.scrollThreshold;\n        let startTime;\n        let touchId;\n        let drag;\n        let maxScroll;\n        let resize;\n        let updated = false;\n        let scrollDirection;\n        let wrapperRect;\n        let regionLeftHalfTime;\n        let regionRightHalfTime;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = (event) => {\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n            const duration = this.wavesurfer.getDuration();\n            if (!scrollDirection || (!drag && !resize)) {\n                return;\n            }\n\n            const x = orientedEvent.clientX;\n            let distanceBetweenCursorAndWrapperEdge = 0;\n            let regionHalfTimeWidth = 0;\n            let adjustment = 0;\n\n            // Get the currently selected time according to the mouse position\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // Considering the point of contact with the region while edgescrolling\n                if (scrollDirection === -1) {\n                    regionHalfTimeWidth = regionLeftHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = x - wrapperRect.left;\n                } else {\n                    regionHalfTimeWidth = regionRightHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = wrapperRect.right - x;\n                }\n            } else {\n                // Considering minLength while edgescroll\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            // Don't edgescroll if region has reached min or max limit\n            const wrapperScrollLeft = this.wrapper.scrollLeft;\n\n            if (scrollDirection === -1) {\n                if (Math.round(wrapperScrollLeft) === 0) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge) <= 0) {\n                    return;\n                }\n            } else {\n                if (Math.round(wrapperScrollLeft) === maxScroll) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge) >= maxScroll) {\n                    return;\n                }\n            }\n\n            // Update scroll position\n            let scrollLeft = wrapperScrollLeft - adjustment + scrollSpeed * scrollDirection;\n\n            if (scrollDirection === -1) {\n                const calculatedLeft = Math.max(0 + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedLeft;\n            } else {\n                const calculatedRight = Math.min(maxScroll - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedRight;\n            }\n\n            const delta = time - startTime;\n            startTime = time;\n\n            // Continue dragging or resizing\n            drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n            // Repeat\n            window.requestAnimationFrame(() => {\n                edgeScroll(event);\n            });\n        };\n\n        const onDown = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            touchId = event.targetTouches ? event.targetTouches[0].identifier : null;\n\n            // stop the event propagation, if this region is resizable or draggable\n            // and the event is therefore handled here.\n            if (this.drag || this.resize) {\n                event.stopPropagation();\n            }\n\n            // Store the selected startTime we begun dragging or resizing\n            startTime = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event, true) * duration\n            );\n\n            // Store the selected point of contact when we begin dragging\n            regionLeftHalfTime = startTime - this.start;\n            regionRightHalfTime = this.end - startTime;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            this.isResizing = false;\n            this.isDragging = false;\n            if (event.target.tagName.toLowerCase() === 'handle') {\n                this.isResizing = true;\n                resize = event.target.classList.contains('wavesurfer-handle-start')\n                    ? 'start'\n                    : 'end';\n            } else {\n                this.isDragging = true;\n                drag = true;\n                resize = false;\n            }\n        };\n        const onUp = (event) => {\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n\n            if (drag || resize) {\n                this.isDragging = false;\n                this.isResizing = false;\n                drag = false;\n                scrollDirection = null;\n                resize = false;\n            }\n\n            if (updated) {\n                updated = false;\n                this.util.preventClick();\n                this.fireEvent('update-end', event);\n                this.wavesurfer.fireEvent('region-update-end', this, event);\n            }\n        };\n        const onMove = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n            if (!drag && !resize) {\n                return;\n            }\n\n            const oldTime = startTime;\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // To maintain relative cursor start point while dragging\n                const maxEnd = this.wavesurfer.getDuration();\n                if (time > maxEnd - regionRightHalfTime) {\n                    time = maxEnd - regionRightHalfTime;\n                }\n\n                if (time - regionLeftHalfTime < 0) {\n                    time = regionLeftHalfTime;\n                }\n            }\n\n            if (resize) {\n                // To maintain relative cursor start point while resizing\n                // we have to handle for minLength\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            let delta = time - startTime;\n            startTime = time;\n\n            // Drag\n            if (this.drag && drag) {\n                updated = updated || !!delta;\n                this.onDrag(delta);\n            }\n\n            // Resize\n            if (this.resize && resize) {\n                updated = updated || !!delta;\n                this.onResize(delta, resize);\n            }\n\n            if (\n                this.scroll && container.clientWidth < this.wrapper.scrollWidth\n            ) {\n                // Triggering edgescroll from within edgeScrollWidth\n                let x = orientedEvent.clientX;\n\n                // Check direction\n                if (x < wrapperRect.left + this.edgeScrollWidth) {\n                    scrollDirection = -1;\n                } else if (x > wrapperRect.right - this.edgeScrollWidth) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n\n                if (scrollDirection) {\n                    edgeScroll(event);\n                }\n            }\n        };\n\n        this.element.addEventListener('mousedown', onDown);\n        this.element.addEventListener('touchstart', onDown);\n\n        document.body.addEventListener('mousemove', onMove);\n        document.body.addEventListener('touchmove', onMove, {passive: false});\n\n        document.addEventListener('mouseup', onUp);\n        document.body.addEventListener('touchend', onUp);\n\n        this.on('remove', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n            document.body.removeEventListener('mousemove', onMove);\n            document.body.removeEventListener('touchmove', onMove);\n        });\n\n        this.wavesurfer.on('destroy', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n        });\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd) {\n            delta = maxEnd - this.end;\n        }\n\n        if (this.start + delta < 0) {\n            delta = this.start * -1;\n        }\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        });\n    }\n\n    /**\n     * @example\n     * onResize(-5, 'start') // Moves the start point 5 seconds back\n     * onResize(0.5, 'end') // Moves the end point 0.5 seconds forward\n     *\n     * @param {number} delta How much to add or subtract, given in seconds\n     * @param {string} direction 'start 'or 'end'\n     */\n    onResize(delta, direction) {\n        const duration = this.wavesurfer.getDuration();\n        if (direction === 'start') {\n            // Check if changing the start by the given delta would result in the region being smaller than minLength\n            // Ignore cases where we are making the region wider rather than shrinking it\n            if (delta > 0 && this.end - (this.start + delta) < this.minLength) {\n                delta = this.end - this.minLength - this.start;\n            }\n\n            if (delta < 0 && (this.start + delta) < 0) {\n                delta = this.start * -1;\n            }\n\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            });\n        } else {\n            // Check if changing the end by the given delta would result in the region being smaller than minLength\n            // Ignore cases where we are making the region wider rather than shrinking it\n            if (delta < 0 && this.end + delta - this.start < this.minLength) {\n                delta = this.start + this.minLength - this.end;\n            }\n\n            if (delta > 0 && (this.end + delta) > duration) {\n                delta = duration - this.end;\n            }\n\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            });\n        }\n    }\n\n    updateHandlesResize(resize) {\n        let cursorStyle;\n        if (resize) {\n            cursorStyle = this.vertical ? 'row-resize' : 'col-resize';\n        } else {\n            cursorStyle = 'auto';\n        }\n\n        this.handleLeftEl && this.style(this.handleLeftEl, { cursor: cursorStyle });\n        this.handleRightEl && this.style(this.handleRightEl, { cursor: cursorStyle });\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(23);\n"],"sourceRoot":""}