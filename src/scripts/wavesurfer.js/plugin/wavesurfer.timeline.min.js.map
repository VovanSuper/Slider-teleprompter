{"version":3,"sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/./src/plugin/timeline/index.js","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/webpack/startup"],"names":["root","factory","exports","module","define","amd","this","TimelinePlugin","params","ws","container","document","querySelector","Error","wavesurfer","util","Object","assign","height","notchPercentHeight","labelPadding","unlabeledNotchColor","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","fontFamily","fontSize","duration","zoomDebounce","formatTimeCallback","defaultFormatTimeCallback","timeInterval","defaultTimeInterval","primaryLabelInterval","defaultPrimaryLabelInterval","secondaryLabelInterval","defaultSecondaryLabelInterval","offset","canvases","wrapper","drawer","pixelRatio","maxCanvasWidth","maxCanvasElementWidth","_onZoom","debounce","render","name","deferInit","instance","isReady","_onReady","once","unAll","un","_onRedraw","removeEventListener","_onScroll","parentNode","_onWrapperClick","removeChild","wsParams","innerHTML","appendChild","createElement","style","display","position","userSelect","webkitUserSelect","fillParent","scrollParent","width","overflowX","overflowY","addEventListener","createWrapper","updateCanvases","updateCanvasesPositioning","renderCanvases","canvas","push","zIndex","pop","parentElement","totalWidth","Math","round","scrollWidth","requiredCanvases","ceil","length","addCanvas","removeCanvas","canvasesLength","forEach","i","canvasWidth","left","backend","getDuration","totalSeconds","parseInt","getWidth","height1","height2","pixelsPerSecond","formatTime","intervalFnOrVal","option","curPixel","curSeconds","positioning","renderPositions","cb","pos","setFillStyles","setFonts","fillRect","fillText","fillStyle","context","getContext","font","x","y","leftOffset","intersection","x1","max","y1","x2","min","y2","text","textWidth","xOffset","measureText","seconds","pxPerSec","minutes","scrollLeft","on","e","preventDefault","relX","offsetX","layerX","fireEvent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"mappings":"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","file":"wavesurfer.timeline.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"timeline\"] = factory();\n})(this, function() {\nreturn ","/**\n * @typedef {Object} TimelinePluginParams\n * @desc Extends the `WavesurferParams` wavesurfer was initialised with\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the timeline should be drawn. This is the only required parameter.\n * @property {number} notchPercentHeight=90 Height of notches in percent\n * @property {string} unlabeledNotchColor='#c0c0c0' The colour of the notches\n * that do not have labels\n * @property {string} primaryColor='#000' The colour of the main notches\n * @property {string} secondaryColor='#c0c0c0' The colour of the secondary\n * notches\n * @property {string} primaryFontColor='#000' The colour of the labels next to\n * the main notches\n * @property {string} secondaryFontColor='#000' The colour of the labels next to\n * the secondary notches\n * @property {number} labelPadding=5 The padding between the label and the notch\n * @property {?number} zoomDebounce A debounce timeout to increase rendering\n * performance for large files\n * @property {string} fontFamily='Arial'\n * @property {number} fontSize=10 Font size of labels in pixels\n * @property {?number} duration Length of the track in seconds. Overrides\n * getDuration() for setting length of timeline\n * @property {function} formatTimeCallback (sec, pxPerSec) -> label\n * @property {function} timeInterval (pxPerSec) -> seconds between notches\n * @property {function} primaryLabelInterval (pxPerSec) -> cadence between\n * labels in primary color\n * @property {function} secondaryLabelInterval (pxPerSec) -> cadence between\n * labels in secondary color\n * @property {?number} offset Offset for the timeline start in seconds. May also be\n * negative.\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('timeline')`\n */\n\n/**\n * Adds a timeline to the waveform.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import TimelinePlugin from 'wavesurfer.timeline.js';\n *\n * // commonjs\n * var TimelinePlugin = require('wavesurfer.timeline.js');\n *\n * // if you are using <script> tags\n * var TimelinePlugin = window.WaveSurfer.timeline;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     TimelinePlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class TimelinePlugin {\n    /**\n     * Timeline plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {TimelinePluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'timeline',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            instance: TimelinePlugin\n        };\n    }\n\n    // event handlers\n    _onScroll = () => {\n        if (this.wrapper && this.drawer.wrapper) {\n            this.wrapper.scrollLeft = this.drawer.wrapper.scrollLeft;\n        }\n    };\n\n    /**\n     * @returns {void}\n     */\n    _onRedraw = () => this.render();\n\n    _onReady = () => {\n        const ws = this.wavesurfer;\n        this.drawer = ws.drawer;\n        this.pixelRatio = ws.drawer.params.pixelRatio;\n        this.maxCanvasWidth = ws.drawer.maxCanvasWidth || ws.drawer.width;\n        this.maxCanvasElementWidth =\n            ws.drawer.maxCanvasElementWidth ||\n            Math.round(this.maxCanvasWidth / this.pixelRatio);\n\n        // add listeners\n        ws.drawer.wrapper.addEventListener('scroll', this._onScroll);\n        ws.on('redraw', this._onRedraw);\n        ws.on('zoom', this._onZoom);\n\n        this.render();\n    };\n\n    /**\n     * @param {object} e Click event\n     */\n    _onWrapperClick = e => {\n        e.preventDefault();\n        const relX = 'offsetX' in e ? e.offsetX : e.layerX;\n        this.fireEvent('click', relX / this.wrapper.scrollWidth || 0);\n    };\n\n    /**\n     * Creates an instance of TimelinePlugin.\n     *\n     * You probably want to use TimelinePlugin.create()\n     *\n     * @param {TimelinePluginParams} params Plugin parameters\n     * @param {object} ws Wavesurfer instance\n     */\n    constructor(params, ws) {\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(params.container)\n                : params.container;\n\n        if (!this.container) {\n            throw new Error('No container for wavesurfer timeline');\n        }\n\n        this.wavesurfer = ws;\n        this.util = ws.util;\n        this.params = Object.assign(\n            {},\n            {\n                height: 20,\n                notchPercentHeight: 90,\n                labelPadding: 5,\n                unlabeledNotchColor: '#c0c0c0',\n                primaryColor: '#000',\n                secondaryColor: '#c0c0c0',\n                primaryFontColor: '#000',\n                secondaryFontColor: '#000',\n                fontFamily: 'Arial',\n                fontSize: 10,\n                duration: null,\n                zoomDebounce: false,\n                formatTimeCallback: this.defaultFormatTimeCallback,\n                timeInterval: this.defaultTimeInterval,\n                primaryLabelInterval: this.defaultPrimaryLabelInterval,\n                secondaryLabelInterval: this.defaultSecondaryLabelInterval,\n                offset: 0\n            },\n            params\n        );\n\n        this.canvases = [];\n        this.wrapper = null;\n        this.drawer = null;\n        this.pixelRatio = null;\n        this.maxCanvasWidth = null;\n        this.maxCanvasElementWidth = null;\n        /**\n         * This event handler has to be in the constructor function because it\n         * relies on the debounce function which is only available after\n         * instantiation\n         *\n         * Use a debounced function if `params.zoomDebounce` is defined\n         *\n         * @returns {void}\n         */\n        this._onZoom = this.params.zoomDebounce\n            ? this.wavesurfer.util.debounce(\n                () => this.render(),\n                this.params.zoomDebounce\n            )\n            : () => this.render();\n    }\n\n    /**\n     * Initialisation function used by the plugin API\n     */\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n        }\n    }\n\n    /**\n     * Destroy function used by the plugin API\n     */\n    destroy() {\n        this.unAll();\n        this.wavesurfer.un('redraw', this._onRedraw);\n        this.wavesurfer.un('zoom', this._onZoom);\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.drawer.wrapper.removeEventListener(\n            'scroll',\n            this._onScroll\n        );\n        if (this.wrapper && this.wrapper.parentNode) {\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\n            this.wrapper.parentNode.removeChild(this.wrapper);\n            this.wrapper = null;\n        }\n    }\n\n    /**\n     * Create a timeline element to wrap the canvases drawn by this plugin\n     *\n     */\n    createWrapper() {\n        const wsParams = this.wavesurfer.params;\n        this.container.innerHTML = '';\n        this.wrapper = this.container.appendChild(\n            document.createElement('timeline')\n        );\n        this.util.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: `${this.params.height}px`\n        });\n\n        if (wsParams.fillParent || wsParams.scrollParent) {\n            this.util.style(this.wrapper, {\n                width: '100%',\n                overflowX: 'hidden',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.wrapper.addEventListener('click', this._onWrapperClick);\n    }\n\n    /**\n     * Render the timeline (also updates the already rendered timeline)\n     *\n     */\n    render() {\n        if (!this.wrapper) {\n            this.createWrapper();\n        }\n        this.updateCanvases();\n        this.updateCanvasesPositioning();\n        this.renderCanvases();\n    }\n\n    /**\n     * Add new timeline canvas\n     *\n     */\n    addCanvas() {\n        const canvas = this.wrapper.appendChild(\n            document.createElement('canvas')\n        );\n        this.canvases.push(canvas);\n        this.util.style(canvas, {\n            position: 'absolute',\n            zIndex: 4\n        });\n    }\n\n    /**\n     * Remove timeline canvas\n     *\n     */\n    removeCanvas() {\n        const canvas = this.canvases.pop();\n        canvas.parentElement.removeChild(canvas);\n    }\n\n    /**\n     * Make sure the correct of timeline canvas elements exist and are cached in\n     * this.canvases\n     *\n     */\n    updateCanvases() {\n        const totalWidth = Math.round(this.drawer.wrapper.scrollWidth);\n        const requiredCanvases = Math.ceil(\n            totalWidth / this.maxCanvasElementWidth\n        );\n\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n    }\n\n    /**\n     * Update the dimensions and positioning style for all the timeline canvases\n     *\n     */\n    updateCanvasesPositioning() {\n        // cache length for performance\n        const canvasesLength = this.canvases.length;\n        this.canvases.forEach((canvas, i) => {\n            // canvas width is the max element width, or if it is the last the\n            // required width\n            const canvasWidth =\n                i === canvasesLength - 1\n                    ? this.drawer.wrapper.scrollWidth -\n                      this.maxCanvasElementWidth * (canvasesLength - 1)\n                    : this.maxCanvasElementWidth;\n            // set dimensions and style\n            canvas.width = canvasWidth * this.pixelRatio;\n            // on certain pixel ratios the canvas appears cut off at the bottom,\n            // therefore leave 1px extra\n            canvas.height = (this.params.height + 1) * this.pixelRatio;\n            this.util.style(canvas, {\n                width: `${canvasWidth}px`,\n                height: `${this.params.height}px`,\n                left: `${i * this.maxCanvasElementWidth}px`\n            });\n        });\n    }\n\n    /**\n     * Render the timeline labels and notches\n     *\n     */\n    renderCanvases() {\n        const duration =\n            this.params.duration ||\n            this.wavesurfer.backend.getDuration();\n\n        if (duration <= 0) {\n            return;\n        }\n        const wsParams = this.wavesurfer.params;\n        const fontSize = this.params.fontSize * wsParams.pixelRatio;\n        const totalSeconds = parseInt(duration, 10) + 1;\n        const width =\n            wsParams.fillParent && !wsParams.scrollParent\n                ? this.drawer.getWidth()\n                : this.drawer.wrapper.scrollWidth * wsParams.pixelRatio;\n        const height1 = this.params.height * this.pixelRatio;\n        const height2 =\n            this.params.height *\n            (this.params.notchPercentHeight / 100) *\n            this.pixelRatio;\n        const pixelsPerSecond = width / duration;\n\n        const formatTime = this.params.formatTimeCallback;\n        // if parameter is function, call the function with\n        // pixelsPerSecond, otherwise simply take the value as-is\n        const intervalFnOrVal = option =>\n            typeof option === 'function' ? option(pixelsPerSecond) : option;\n        const timeInterval = intervalFnOrVal(this.params.timeInterval);\n        const primaryLabelInterval = intervalFnOrVal(\n            this.params.primaryLabelInterval\n        );\n        const secondaryLabelInterval = intervalFnOrVal(\n            this.params.secondaryLabelInterval\n        );\n\n        let curPixel = pixelsPerSecond * this.params.offset;\n        let curSeconds = 0;\n        let i;\n        // build an array of position data with index, second and pixel data,\n        // this is then used multiple times below\n        const positioning = [];\n        for (i = 0; i < totalSeconds / timeInterval; i++) {\n            positioning.push([i, curSeconds, curPixel]);\n            curSeconds += timeInterval;\n            curPixel += pixelsPerSecond * timeInterval;\n        }\n\n        // iterate over each position\n        const renderPositions = cb => {\n            positioning.forEach(pos => {\n                cb(pos[0], pos[1], pos[2]);\n            });\n        };\n\n        // render primary labels\n        this.setFillStyles(this.params.primaryColor);\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\n        this.setFillStyles(this.params.primaryFontColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (i % primaryLabelInterval === 0) {\n                this.fillRect(curPixel, 0, 1, height1);\n                this.fillText(\n                    formatTime(curSeconds, pixelsPerSecond),\n                    curPixel + this.params.labelPadding * this.pixelRatio,\n                    height1\n                );\n            }\n        });\n\n        // render secondary labels\n        this.setFillStyles(this.params.secondaryColor);\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\n        this.setFillStyles(this.params.secondaryFontColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (i % secondaryLabelInterval === 0) {\n                this.fillRect(curPixel, 0, 1, height1);\n                this.fillText(\n                    formatTime(curSeconds, pixelsPerSecond),\n                    curPixel + this.params.labelPadding * this.pixelRatio,\n                    height1\n                );\n            }\n        });\n\n        // render the actual notches (when no labels are used)\n        this.setFillStyles(this.params.unlabeledNotchColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (\n                i % secondaryLabelInterval !== 0 &&\n                i % primaryLabelInterval !== 0\n            ) {\n                this.fillRect(curPixel, 0, 1, height2);\n            }\n        });\n    }\n\n    /**\n     * Set the canvas fill style\n     *\n     * @param {DOMString|CanvasGradient|CanvasPattern} fillStyle Fill style to\n     * use\n     */\n    setFillStyles(fillStyle) {\n        this.canvases.forEach(canvas => {\n            const context = canvas.getContext('2d');\n            if (context) {\n                context.fillStyle = fillStyle;\n            }\n        });\n    }\n\n    /**\n     * Set the canvas font\n     *\n     * @param {DOMString} font Font to use\n     */\n    setFonts(font) {\n        this.canvases.forEach(canvas => {\n            const context = canvas.getContext('2d');\n            if (context) {\n                context.font = font;\n            }\n        });\n    }\n\n    /**\n     * Draw a rectangle on the canvases\n     *\n     * (it figures out the offset for each canvas)\n     *\n     * @param {number} x X-position\n     * @param {number} y Y-position\n     * @param {number} width Width\n     * @param {number} height Height\n     */\n    fillRect(x, y, width, height) {\n        this.canvases.forEach((canvas, i) => {\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(x + width, i * this.maxCanvasWidth + canvas.width),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                const context = canvas\n                    .getContext('2d');\n                if (context) {\n                    context\n                        .fillRect(\n                            intersection.x1 - leftOffset,\n                            intersection.y1,\n                            intersection.x2 - intersection.x1,\n                            intersection.y2 - intersection.y1\n                        );\n                }\n            }\n        });\n    }\n\n    /**\n     * Fill a given text on the canvases\n     *\n     * @param {string} text Text to render\n     * @param {number} x X-position\n     * @param {number} y Y-position\n     */\n    fillText(text, x, y) {\n        let textWidth;\n        let xOffset = 0;\n\n        this.canvases.forEach(canvas => {\n            const context = canvas.getContext('2d');\n            const canvasWidth = context.canvas.width;\n\n            if (xOffset > x + textWidth) {\n                return;\n            }\n\n            if (xOffset + canvasWidth > x && context) {\n                textWidth = context.measureText(text).width;\n                context.fillText(text, x - xOffset, y);\n            }\n\n            xOffset += canvasWidth;\n        });\n    }\n\n    /**\n     * Turn the time into a suitable label for the time.\n     *\n     * @param {number} seconds Seconds to format\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Time\n     */\n    defaultFormatTimeCallback(seconds, pxPerSec) {\n        if (seconds / 60 > 1) {\n            // calculate minutes and seconds from seconds count\n            const minutes = parseInt(seconds / 60, 10);\n            seconds = parseInt(seconds % 60, 10);\n            // fill up seconds with zeroes\n            seconds = seconds < 10 ? '0' + seconds : seconds;\n            return `${minutes}:${seconds}`;\n        }\n        return Math.round(seconds * 1000) / 1000;\n    }\n\n    /**\n     * Return how many seconds should be between each notch\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Time\n     */\n    defaultTimeInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 1;\n        } else if (pxPerSec * 5 >= 25) {\n            return 5;\n        } else if (pxPerSec * 15 >= 25) {\n            return 15;\n        }\n        return Math.ceil(0.5 / pxPerSec) * 60;\n    }\n\n    /**\n     * Return the cadence of notches that get labels in the primary color.\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Cadence\n     */\n    defaultPrimaryLabelInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 10;\n        } else if (pxPerSec * 5 >= 25) {\n            return 6;\n        } else if (pxPerSec * 15 >= 25) {\n            return 4;\n        }\n        return 4;\n    }\n\n    /**\n     * Return the cadence of notches that get labels in the secondary color.\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Cadence\n     */\n    defaultSecondaryLabelInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 5;\n        } else if (pxPerSec * 5 >= 25) {\n            return 2;\n        } else if (pxPerSec * 15 >= 25) {\n            return 2;\n        }\n        return 2;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(171);\n"],"sourceRoot":""}